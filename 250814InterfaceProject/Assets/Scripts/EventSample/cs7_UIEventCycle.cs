using System.Text;
using UnityEngine;
using UnityEngine.EventSystems;

public class cs7_UIEventCycle : MonoBehaviour,
    IPointerEnterHandler, IPointerExitHandler,
    IPointerDownHandler, IPointerUpHandler, IPointerClickHandler,     //포인터 관련

    IBeginDragHandler, IDragHandler, IEndDragHandler,                  // 드래그 관련

    ISelectHandler, IDeselectHandler, ISubmitHandler, ICancelHandler, // 선택 취소

    IScrollHandler,                                                   //스크롤
    IUpdateSelectedHandler,                                           // 선택 상태에서의 매 프레임에 대한 작업
    IMoveHandler                                                      //키보드나 조이스틱 관련
{
    //필드
    private int eventCount = 0;
    private float lastEventTime = 0.0f;

    //이벤트 처리용 함수
    //BaseEventData는 이벤트 시스템 에서 사용되는 이벤트 데이터에 대한 기초 클래스
    private void Handle(string eventName, BaseEventData eventData)
    {
        eventCount++;//카운트 증가
        float now = Time.time;//시간체크
        float delta = now - lastEventTime; //직전의 이벤트와의 시간 간격을 계산합니다
        lastEventTime = now;

        string pos = ""; // 받은 값이 PointerEventData일 경우 좌표에 대한 출력처리


        //C# 패턴 매칭
        // 1. eventData is PointerEventData -> 객체가 PointerEventData인지 확인
        // 2. 맞으면 PointerData로 변환 해서 지역변수로 저장한다
        if (eventData is PointerEventData pointerData)
        {
            pos = $"pos : {pointerData.position}";
        }

        StringBuilder sb = new StringBuilder();

        sb.Append($"eventCount : <color=yellow> {eventCount} </color>, ");//이벤트 횟수
        sb.Append($"eventName : <b> {eventName} </b>, "); // 이벤트명
        sb.Append($"<color=cyan> {pos} </color>, "); // 좌표
        sb.Append($"delta : <color=blue> {delta:F3} </color>"); // 이벤트시간
        //문자 표현 서식
        // F3 : Fixed-ponit(소숫점 고정) 형태로 소수점 이하 3자리 까지 표현하시오
        // N2 : number에 대한 구분 1,234.57
        // D5 : Decimal(정수)에 대한 구분 01234
        // P1 : 퍼센트에 대한 사용 (값 * 100 이후 %를 붙인다) {0.34 : P1} -> 34%

        Debug.Log(sb.ToString());
    }
    private void OnEnable()
    {
        eventCount = 0;
        lastEventTime = Time.time;
    }

    //해당 이벤트가 발생할때마다 handle이 실행됩니다
    //접근제한자 반환타입 함수명(매개변수) => 실행가능;

    //ex)↘
    public void OnBeginDrag(PointerEventData eventData) => Handle("OnBeginDrag", eventData);

    public void OnCancel(BaseEventData eventData) => Handle("OnCancel", eventData);

    public void OnDeselect(BaseEventData eventData) => Handle("OnDeselect", eventData);

    public void OnDrag(PointerEventData eventData) => Handle("OnDrag", eventData);

    public void OnEndDrag(PointerEventData eventData) => Handle("OnEndDrag", eventData);

    public void OnMove(AxisEventData eventData) => Handle("OnMove", eventData);

    public void OnPointerClick(PointerEventData eventData) => Handle("OnPointerClick", eventData);

    public void OnPointerDown(PointerEventData eventData) => Handle("OnPointerDown", eventData);

    public void OnPointerEnter(PointerEventData eventData) => Handle("OnPointerEnter", eventData);

    public void OnPointerExit(PointerEventData eventData) => Handle("OnPointerExit", eventData);

    public void OnPointerUp(PointerEventData eventData) => Handle("OnPointerUp", eventData);

    public void OnScroll(PointerEventData eventData) => Handle("OnScroll", eventData);

    public void OnSelect(BaseEventData eventData) => Handle("OnSelect", eventData);

    public void OnSubmit(BaseEventData eventData) => Handle("OnSubmit", eventData);

    public void OnUpdateSelected(BaseEventData eventData) => Handle("OnUpdateSelected", eventData);

    // Start is called once before the first execution of Update after the MonoBehaviour is created
    void Start()
    {

    }

    // Update is called once per frame
    void Update()
    {

    }
}